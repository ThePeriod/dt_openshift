apiVersion: v1
items:
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:13Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: cron0001-notificacionrecordatorios
    namespace: pipelines-prod
    resourceVersion: "9848455"
    uid: 8bea1fd4-01fd-41b2-a28d-1e45fd6074a2
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CRON0001-NotificacionRecordatorios',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "cron0001-notificacionrec").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=cron0001-notificacionrec", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CRON0001-NotificacionRecordatorios-1.0.jar oc-build/deployments/CRON0001-NotificacionRecordatorios.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "cron0001-notificacionrec").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'cron0001-notificacionrec').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("cron0001-notificacionrec:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "cron0001-notificacionrec")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/cron0001-notificacionrec", "--manual")
                      }
                      sh "sleep 40"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "cron0001-notificacionrec").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:13Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: cron0005-cargarutdatagrid
    namespace: pipelines-prod
    resourceVersion: "9848458"
    uid: 3f9b41c7-9cab-4e27-af75-efe18a3301cc
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CRON0005-CargaRutDatagrid',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "cron0005-cargarutdatagrid").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=cron0005-cargarutdatagrid", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CRON0005-CargaRutDatagrid-1.0.jar oc-build/deployments/CRON0005-CargaRutDatagrid.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "cron0005-cargarutdatagrid").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'cron0005-cargarutdatagrid').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("cron0005-cargarutdatagrid:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "cron0005-cargarutdatagrid")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/cron0005-cargarutdatagrid", "--manual")
                      }
                      sh "sleep 40"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "cron0005-cargarutdatagrid").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:13Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0001-validacionesfondo
    namespace: pipelines-prod
    resourceVersion: "9848460"
    uid: 1694508a-bd64-4dea-a231-6d30c6510605
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0001-ValidacionesFondo',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0001-validacionesfond").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0001-validacionesfond", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0001-ValidacionesFondo oc-build/deployments/CSR0001-ValidacionesFondo.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0001-validacionesfond").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0001-validacionesfond').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0001-validacionesfond:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0001-validacionesfond")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0001-validacionesfond", "--manual")
                      }
                      sh "sleep 40"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 45"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0001-validacionesfond").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"build.openshift.io/v1","kind":"BuildConfig","metadata":{"annotations":{"pipeline.alpha.openshift.io/uses":"[{\"name\": \"jenkins\", \"namespace\": \"\", \"kind\": \"DeploymentConfig\"}]"},"labels":{"app":"cicd-pipeline","group":"cicd","name":"cicd-pipeline","template":"cicd"},"name":"csr0001-validacionesfondo-v2","namespace":"pipelines-prod"},"spec":{"failedBuildsHistoryLimit":5,"nodeSelector":{},"output":{},"postCommit":{},"resources":{},"runPolicy":"Serial","source":{"type":"None"},"strategy":{"jenkinsPipelineStrategy":{"env":[{"name":"PROD_PROJECT","value":"api-fiscalizacion-prod"},{"name":"ENABLE_QUAY","value":"false"}],"jenkinsfile":"pipeline {\n  agent {\n    label 'maven'\n  }\n  stages {\n    stage('Clonando repo y Compilando') {\n        steps {\n            git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0001-ValidacionesFondo-v2',\n            branch: 'master',\n            credentialsId: 'azure_credenciales_id'])\n        script {\n            def pom = readMavenPom file: 'pom.xml'\n            version = pom.version\n        }\n        sh \"mvn -s configuration/settings.xml install -DskipTests=true\"\n      }\n    }\n    stage('Creando Image Builder') {\n      when {\n        expression {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT) {\n              return !openshift.selector(\"bc\", \"csr0001-validacionesfondo-v2\").exists();\n            }\n          }\n        }\n      }\n      steps {\n        script {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT) {\n              openshift.newBuild(\"--name=csr0001-validacionesfondo-v2\", \"--image-stream=redhat-openjdk18-openshift:1.4\", \"--binary=true\")\n            }\n          }\n        }\n      }\n    }\n    stage('Construyendo imagen') {\n      steps {\n        sh \"rm -rf oc-build \u0026\u0026 mkdir -p oc-build/deployments\"\n        sh \"cp target/CSR0001-ValidacionesFondo-v2-1.0.0.jar oc-build/deployments/CSR0001-ValidacionesFondo-v2.jar\"\n\n        script {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT) {\n              openshift.selector(\"bc\", \"csr0001-validacionesfondo-v2\").startBuild(\"--from-dir=oc-build\", \"--wait=true\")\n            }\n          }\n        }\n        sh \"sleep 10\"\n      }\n    }\n    stage('Creando en prod') {\n      when {\n        expression {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT) {\n              return !openshift.selector('dc', 'csr0001-validacionesfondo-v2').exists()\n            }\n          }\n        }\n      }\n      steps {\n        script {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT) {\n              def app = openshift.newApp(\"csr0001-validacionesfondo-v2:latest\")\n              app.narrow(\"svc\").expose();\n              def dc = openshift.selector(\"dc\", \"csr0001-validacionesfondo-v2\")\n              while (dc.object().spec.replicas != dc.object().status.availableReplicas) {\n                  sleep 10\n              }\n              openshift.set(\"triggers\", \"dc/csr0001-validacionesfondo-v2\", \"--manual\")\n            }\n            sh \"sleep 40\"\n          }\n        }\n      }\n    }\n    stage('Desplegando en prod') {\n      steps {\n      sh \"sleep 45\"\n        script {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT) {\n              openshift.selector(\"dc\", \"csr0001-validacionesfondo-v2\").rollout().latest();\n            }\n            sh \"sleep 15\"\n          }\n        }\n      }\n    }\n  }\n}\n"},"type":"JenkinsPipeline"},"successfulBuildsHistoryLimit":5,"triggers":[{"github":{"secret":"vJU0CXQe"},"type":"GitHub"},{"generic":{"secret":"vJU0CXQe"},"type":"Generic"}]}}
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:13Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0001-validacionesfondo-v2
    namespace: pipelines-prod
    resourceVersion: "9848459"
    uid: ec6c7555-aea2-495e-a6b4-d5c8f97aabaf
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0001-ValidacionesFondo-v2',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0001-validacionesfondo-v2").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0001-validacionesfondo-v2", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0001-ValidacionesFondo-v2-1.0.0.jar oc-build/deployments/CSR0001-ValidacionesFondo-v2.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0001-validacionesfondo-v2").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0001-validacionesfondo-v2').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0001-validacionesfondo-v2:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0001-validacionesfondo-v2")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0001-validacionesfondo-v2", "--manual")
                      }
                      sh "sleep 40"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 45"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0001-validacionesfondo-v2").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
    creationTimestamp: "2023-05-23T15:48:13Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0001-validacionesfondoextra
    namespace: pipelines-prod
    resourceVersion: "9848461"
    uid: 7e2f9a0e-8991-4479-bbb3-5a64cf923187
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0001-ValidacionesFondo-v2',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0001-validacionesfondoextra").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0001-validacionesfondoextra", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0001-ValidacionesFondo-v2-1.0.0.jar oc-build/deployments/CSR0001-ValidacionesFondo-v2.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0001-validacionesfondoextra").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0001-validacionesfondoextra').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0001-validacionesfondoextra:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0001-validacionesfondoextra")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0001-validacionesfondoextra", "--manual")
                      }
                      sh "sleep 40"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 45"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0001-validacionesfondoextra").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:13Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0001-validacionesfondolarge
    namespace: pipelines-prod
    resourceVersion: "9848462"
    uid: 6881f8f8-a353-4259-a4fe-6abca22fdadd
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0001-ValidacionesFondo-v2',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0001-validacionesfondolarge").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0001-validacionesfondolarge", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0001-ValidacionesFondo-v2-1.0.0.jar oc-build/deployments/CSR0001-ValidacionesFondo-v2.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0001-validacionesfondolarge").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0001-validacionesfondolarge').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0001-validacionesfondolarge:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0001-validacionesfondolarge")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0001-validacionesfondolarge", "--manual")
                      }
                      sh "sleep 40"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 45"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0001-validacionesfondolarge").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:13Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0001-validacionesfondomedium
    namespace: pipelines-prod
    resourceVersion: "9848463"
    uid: 69d1e178-abf3-46df-9cc0-7245835cbfe3
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0001-ValidacionesFondo-v2',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0001-validacionesfondomedium").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0001-validacionesfondomedium", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0001-ValidacionesFondo-v2-1.0.0.jar oc-build/deployments/CSR0001-ValidacionesFondo-v2.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0001-validacionesfondomedium").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0001-validacionesfondomedium').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0001-validacionesfondomedium:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0001-validacionesfondomedium")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0001-validacionesfondomedium", "--manual")
                      }
                      sh "sleep 40"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 45"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0001-validacionesfondomedium").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:13Z"
    generation: 4
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0001-validacionesfondosmall
    namespace: pipelines-prod
    resourceVersion: "136379580"
    uid: 531fce7c-bc23-453a-aef0-382412762a05
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0001-ValidacionesFondo-v2',
                      branch: 'master',
                      credentialsId: 'vsts'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0001-validacionesfondosmall").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0001-validacionesfondosmall", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0001-ValidacionesFondo-v2-1.0.0.jar oc-build/deployments/CSR0001-ValidacionesFondo-v2.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0001-validacionesfondosmall").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0001-validacionesfondosmall').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0001-validacionesfondosmall:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0001-validacionesfondosmall")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0001-validacionesfondosmall", "--manual")
                      }
                      sh "sleep 40"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 45"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0001-validacionesfondosmall").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 2
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:13Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0001-validacionesfondosmalltmp
    namespace: pipelines-prod
    resourceVersion: "9848467"
    uid: dce17017-27b1-4963-b840-fa43a219d0c8
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0001-ValidacionesFondo-v2',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0001-validacionesfondosmalltmp").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0001-validacionesfondosmalltmp", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0001-ValidacionesFondo-v2-1.0.0.jar oc-build/deployments/CSR0001-ValidacionesFondo-v2.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0001-validacionesfondosmalltmp").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0001-validacionesfondosmalltmp').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0001-validacionesfondosmalltmp:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0001-validacionesfondosmalltmp")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0001-validacionesfondosmalltmp", "--manual")
                      }
                      sh "sleep 40"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 45"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0001-validacionesfondosmalltmp").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:13Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0002-cargaarchivodeclaracion
    namespace: pipelines-prod
    resourceVersion: "9848468"
    uid: 6ec531ce-78c7-4d67-b69c-354de6be9ee6
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0002-CargaArchivoDeclaracion',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0002-cargaarchivodecl").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0002-cargaarchivodecl", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0002-CargaArchivoDeclaracion-1.0.jar oc-build/deployments/CSR0002-CargaArchivoDeclaracion.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0002-cargaarchivodecl").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0002-cargaarchivodecl').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0002-cargaarchivodecl:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0002-cargaarchivodecl")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0002-cargaarchivodecl", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0002-cargaarchivodecl").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
    creationTimestamp: "2023-05-23T15:48:13Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0002-cargaarchivoextra
    namespace: pipelines-prod
    resourceVersion: "9848469"
    uid: 07ae07b2-6400-4704-a179-fd18a8dec18b
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0002-CargaArchivoDeclaracion',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0002-cargaarchivoextra").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0002-cargaarchivoextra", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0002-CargaArchivoDeclaracion-1.0.jar oc-build/deployments/CSR0002-CargaArchivoDeclaracion.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0002-cargaarchivoextra").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0002-cargaarchivoextra').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0002-cargaarchivoextra:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0002-cargaarchivoextra")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0002-cargaarchivoextra", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0002-cargaarchivoextra").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:13Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0002-cargaarchivolarge
    namespace: pipelines-prod
    resourceVersion: "9848471"
    uid: 1afaae93-0d22-43fc-9a2d-7d22c6700b19
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0002-CargaArchivoDeclaracion',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0002-cargaarchivolarge").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0002-cargaarchivolarge", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0002-CargaArchivoDeclaracion-1.0.jar oc-build/deployments/CSR0002-CargaArchivoDeclaracion.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0002-cargaarchivolarge").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0002-cargaarchivolarge').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0002-cargaarchivolarge:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0002-cargaarchivolarge")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0002-cargaarchivolarge", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0002-cargaarchivolarge").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:13Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0002-cargaarchivomedium
    namespace: pipelines-prod
    resourceVersion: "9848473"
    uid: 71dcf8ee-0e24-42ed-8f24-3459c6c34257
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0002-CargaArchivoDeclaracion',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0002-cargaarchivomedium").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0002-cargaarchivomedium", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0002-CargaArchivoDeclaracion-1.0.jar oc-build/deployments/CSR0002-CargaArchivoDeclaracion.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0002-cargaarchivomedium").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0002-cargaarchivomedium').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0002-cargaarchivomedium:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0002-cargaarchivomedium")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0002-cargaarchivomedium", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0002-cargaarchivomedium").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:13Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0002-cargaarchivosmall
    namespace: pipelines-prod
    resourceVersion: "9848475"
    uid: 5c64642e-0c4a-416f-ad7b-9d8d54a1d74f
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0002-CargaArchivoDeclaracion',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0002-cargaarchivosmall").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0002-cargaarchivosmall", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0002-CargaArchivoDeclaracion-1.0.jar oc-build/deployments/CSR0002-CargaArchivoDeclaracion.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0002-cargaarchivosmall").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0002-cargaarchivosmall').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0002-cargaarchivosmall:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0002-cargaarchivosmall")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0002-cargaarchivosmall", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0002-cargaarchivosmall").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:14Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0002-cargaarchivosmalltmp
    namespace: pipelines-prod
    resourceVersion: "9848481"
    uid: 739d341e-72cb-4e4d-b758-f25c7121a8dc
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0002-CargaArchivoDeclaracion',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0002-cargaarchivosmalltmp").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0002-cargaarchivosmalltmp", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0002-CargaArchivoDeclaracion-1.0.jar oc-build/deployments/CSR0002-CargaArchivoDeclaracion.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0002-cargaarchivosmalltmp").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0002-cargaarchivosmalltmp').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0002-cargaarchivosmalltmp:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0002-cargaarchivosmalltmp")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0002-cargaarchivosmalltmp", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0002-cargaarchivosmalltmp").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:14Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0003-envioarchivodeclaracion
    namespace: pipelines-prod
    resourceVersion: "9848485"
    uid: 54bf8e88-564a-490b-81c0-0131fb749074
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0003-EnvioArchivoDeclaracion',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0003-envioarchivodecl").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0003-envioarchivodecl", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0003-EnvioArchivoDeclaracion-1.0.jar oc-build/deployments/CSR0003-EnvioArchivoDeclaracion.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0003-envioarchivodecl").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0003-envioarchivodecl').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0003-envioarchivodecl:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0003-envioarchivodecl")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0003-envioarchivodecl", "--manual")
                      }
                      sh "sleep 50"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                  sh "sleep 25"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0003-envioarchivodecl").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:14Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0004-notificacioniteraciones
    namespace: pipelines-prod
    resourceVersion: "9848488"
    uid: bd7416fb-fc1e-42a4-8fff-9d46968e7533
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0004-NotificacionIteraciones',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0004-notificacioniter").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0004-notificacioniter", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0004-NotificacionIteraciones-1.0.jar oc-build/deployments/CSR0004-NotificacionIteraciones.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0004-notificacioniter").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0004-notificacioniter').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0004-notificacioniter:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0004-notificacioniter")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0004-notificacioniter", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0004-notificacioniter").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:14Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0005-manager
    namespace: pipelines-prod
    resourceVersion: "9848499"
    uid: efbb41e9-67ab-47c3-89f1-c2b8bbdb5816
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0005-ManagerDeclaracion',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0005-managerdeclaraci").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0005-managerdeclaraci", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0005-ManagerDeclaracion-1.0.jar oc-build/deployments/CSR0005-ManagerDeclaracion.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0005-managerdeclaraci").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0005-managerdeclaraci').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0005-managerdeclaraci:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0005-managerdeclaraci")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0005-managerdeclaraci", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 30"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0005-managerdeclaraci").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
    creationTimestamp: "2023-05-23T15:48:14Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0005-manager-big
    namespace: pipelines-prod
    resourceVersion: "9848496"
    uid: 5074ecc9-fbaa-4a35-9ac0-e8fd3910fb83
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0005-ManagerDeclaracion',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0005-managerdec-big").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0005-managerdec-big", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0005-ManagerDeclaracion-1.0.jar oc-build/deployments/CSR0005-ManagerDeclaracion.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0005-managerdec-big").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0005-managerdec-big').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0005-managerdec-big:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0005-managerdec-big")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0005-managerdec-big", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 30"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0005-managerdec-big").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"build.openshift.io/v1","kind":"BuildConfig","metadata":{"annotations":{"pipeline.alpha.openshift.io/uses":"[{\"name\": \"jenkins\", \"namespace\": \"\", \"kind\": \"DeploymentConfig\"}]"},"labels":{"app":"cicd-pipeline","group":"cicd","name":"cicd-pipeline","template":"cicd"},"name":"csr0006-excepciones","namespace":"pipelines-prod"},"spec":{"failedBuildsHistoryLimit":5,"nodeSelector":{},"output":{},"postCommit":{},"resources":{},"runPolicy":"Serial","source":{"type":"None"},"strategy":{"jenkinsPipelineStrategy":{"env":[{"name":"PROD_PROJECT","value":"api-fiscalizacion-prod"},{"name":"ENABLE_QUAY","value":"false"}],"jenkinsfile":"pipeline {\n  agent {\n    label 'maven'\n  }\n  stages {\n    stage('Clonando repo y Compilando') {\n        steps {\n            git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0006-Excepciones',\n            branch: 'master',\n            credentialsId: 'azure_credenciales_id'])\n        script {\n            def pom = readMavenPom file: 'pom.xml'\n            version = pom.version\n        }\n        sh \"mvn -s configuration/settings.xml install -DskipTests=true\"\n      }\n    }\n    stage('Creando Image Builder') {\n      when {\n        expression {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT) {\n              return !openshift.selector(\"bc\", \"csr0006-excepciones\").exists();\n            }\n          }\n        }\n      }\n      steps {\n        script {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT) {\n              openshift.newBuild(\"--name=csr0006-excepciones\", \"--image-stream=redhat-openjdk18-openshift:1.4\", \"--binary=true\")\n            }\n          }\n        }\n      }\n    }\n    stage('Construyendo imagen') {\n      steps {\n        sh \"rm -rf oc-build \u0026\u0026 mkdir -p oc-build/deployments\"\n        sh \"cp target/CSR0006-Excepciones-1.0.jar oc-build/deployments/CSR0006-Excepciones.jar\"\n\n        script {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT) {\n              openshift.selector(\"bc\", \"csr0006-excepciones\").startBuild(\"--from-dir=oc-build\", \"--wait=true\")\n            }\n          }\n        }\n        sh \"sleep 10\"\n      }\n    }\n    stage('Creando en prod') {\n      when {\n        expression {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT) {\n              return !openshift.selector('dc', 'csr0006-excepciones').exists()\n            }\n          }\n        }\n      }\n      steps {\n        script {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT) {\n              def app = openshift.newApp(\"csr0006-excepciones:latest\")\n              app.narrow(\"svc\").expose();\n              def dc = openshift.selector(\"dc\", \"csr0006-excepciones\")\n              while (dc.object().spec.replicas != dc.object().status.availableReplicas) {\n                  sleep 10\n              }\n              openshift.set(\"triggers\", \"dc/csr0006-excepciones\", \"--manual\")\n            }\n            sh \"sleep 45\"\n          }\n        }\n      }\n    }\n    stage('Desplegando en prod') {\n      steps {\n      sh \"sleep 30\"\n        script {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT) {\n              openshift.selector(\"dc\", \"csr0006-excepciones\").rollout().latest();\n            }\n            sh \"sleep 15\"\n          }\n        }\n      }\n    }\n  }\n}\n"},"type":"JenkinsPipeline"},"successfulBuildsHistoryLimit":5,"triggers":[{"github":{"secret":"vJU0CXQe"},"type":"GitHub"},{"generic":{"secret":"vJU0CXQe"},"type":"Generic"}]}}
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:15Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: csr0006-excepciones
    namespace: pipelines-prod
    resourceVersion: "9848502"
    uid: 262f9eed-5d7c-428f-b303-63c3d6d01cdb
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/CSR0006-Excepciones',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "csr0006-excepciones").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=csr0006-excepciones", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/CSR0006-Excepciones-1.0.jar oc-build/deployments/CSR0006-Excepciones.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "csr0006-excepciones").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'csr0006-excepciones').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("csr0006-excepciones:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "csr0006-excepciones")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/csr0006-excepciones", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 30"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "csr0006-excepciones").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:15Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: product-lre
    namespace: pipelines-prod
    resourceVersion: "9848513"
    uid: 237462fe-38b3-43a9-ae9a-e0041198f009
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: lre-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: "pipeline {\n  agent {\n    label 'nodejs'\n  }\n  stages {\n
          \   stage('Clonando repo y Compilando') {\n      steps {\n          git([url:
          'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/product-lre',\n
          \         branch: 'master',\n          credentialsId: 'azure_credenciales_id'])\n
          \     }\n    }\n    stage('Creando Image Builder') {\n      when {\n        expression
          {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT)
          {\n              return !openshift.selector(\"bc\", \"product-lre\").exists();\n
          \           }\n          }\n        }\n      }\n      steps {\n        script
          {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT)
          {\n              openshift.newBuild(\"--name=product-lre\", \"--image-stream=nodejs:10\",
          \"--binary=true\")\n            }\n          }\n        }\n      }\n    }\n
          \   stage('Construyendo imagen') {\n      steps {\n        script {\n          openshift.withCluster()
          {\n            openshift.withProject(env.PROD_PROJECT) {\n              openshift.selector(\"bc\",
          \"product-lre\").startBuild(\"--from-dir=./\", \"--wait=true\")\n            }\n
          \         }\n        }\n        sh \"sleep 10\"\n      }\n    }\n    stage('Creando
          en prod') {\n      when {\n        expression {\n          openshift.withCluster()
          {\n            openshift.withProject(env.PROD_PROJECT) {\n              return
          !openshift.selector('dc', 'product-lre').exists()\n            }\n          }\n
          \       }\n      }\n      steps {\n        script {\n          openshift.withCluster()
          {\n            openshift.withProject(env.PROD_PROJECT) {\n              def
          app = openshift.newApp(\"product-lre:latest\")\n              app.narrow(\"svc\").expose();\n
          \             def dc = openshift.selector(\"dc\", \"product-lre\")\n              while
          (dc.object().spec.replicas != dc.object().status.availableReplicas) {\n
          \                 sleep 10\n              }\n              openshift.set(\"triggers\",
          \"dc/product-lre\", \"--manual\")\n            }\n            sh \"sleep
          30\"\n          }\n        }\n      }\n    }\n    stage('Desplegando en
          prod') {\n      steps {\n        echo \"Deploy imagen\"\n        script
          {\n          openshift.withCluster() {\n            openshift.withProject(env.PROD_PROJECT)
          {\n            sh \"sleep 30\"\n              def rm = openshift.selector(\"dc\",
          \"product-lre\").rollout().latest();\n              sh \"sleep 180\"\n              openshift.selector(\"dc\",
          \"product-lre\").rollout().latest();\n              echo \"Deploy generado\"
          \n            }\n            sh \"sleep 20\"\n          }\n        }\n      }\n
          \   }\n  }\n}\n"
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:15Z"
    generation: 14
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: prox0001-registralibrorem
    namespace: pipelines-prod
    resourceVersion: "143140890"
    uid: a939c29d-58b9-4fc7-b002-ca77daa6c6d1
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/PRX0001-RegistraLibroRemumeracion',
                      branch: 'feature/prueba_logs',
                      credentialsId: 'vsts'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "prox0001-registralibrore").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=prox0001-registralibrore", "--image-stream=fuse7-java-openshift:1.3", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/PRX0001-RegistraLibroRemumeracion-1.0.jar oc-build/deployments/PRX0001-RegistraLibroRemumeracion.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "prox0001-registralibrore").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en Prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'prox0001-registralibrore').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("prox0001-registralibrore:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "prox0001-registralibrore")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/prox0001-registralibrore", "--manual")
                      }
                      sh "sleep 40"
                    }
                  }
                }
              }
              stage('Desplegando en Prod') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "prox0001-registralibrore").rollout().latest();
                      }
                      sh "sleep 10"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 9
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:15Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: prx0002-validareglas
    namespace: pipelines-prod
    resourceVersion: "9848518"
    uid: 1d7fde2e-74f6-4ec9-a0d7-361e8badde10
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/PRX0002-ValidaReglasLRE',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "prx0002-validareglaslre").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=prx0002-validareglaslre", "--image-stream=fuse7-java-openshift:1.3", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/PRX0002-ValidaReglasLRE-1.0.jar oc-build/deployments/PRX0002-ValidaReglasLRE.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "prx0002-validareglaslre").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'prx0002-validareglaslre').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("prx0002-validareglaslre:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "prx0002-validareglaslre")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/prx0002-validareglaslre", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "prx0002-validareglaslre").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:15Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: prx0003-datospersona-datagrid
    namespace: pipelines-prod
    resourceVersion: "9848522"
    uid: 39cf4814-6191-4fd0-a0a5-bbb6c6ae1257
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/PRX0003-DatosPersona-Datagrid',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "prx0003-datospersona-datagrid").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=prx0003-datospersona-datagrid", "--image-stream=fuse7-java-openshift:1.3", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/PRX0003-DatosPersona-Datagrid-1.0.jar oc-build/deployments/PRX0003-DatosPersona-Datagrid.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "prx0003-datospersona-datagrid").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'prx0003-datospersona-datagrid').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("prx0003-datospersona-datagrid:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "prx0003-datospersona-datagrid")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/prx0003-datospersona-datagrid", "--manual")
                      }
                      sh "sleep 40"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                  sh "sleep 30"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "prx0003-datospersona-datagrid").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:16Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: prx0003-datospersonas
    namespace: pipelines-prod
    resourceVersion: "9848525"
    uid: 75eda992-a4de-493b-a6d0-25617165298a
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/PRX0003-DatosPersona',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "prx0003-datospersona").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=prx0003-datospersona", "--image-stream=fuse7-java-openshift:1.3", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/PRX0003-DatosPersona-1.0.jar oc-build/deployments/PRX0003-DatosPersona.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "prx0003-datospersona").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'prx0003-datospersona').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("prx0003-datospersona:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "prx0003-datospersona")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/prx0003-datospersona", "--manual")
                      }
                      sh "sleep 40"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                  sh "sleep 30"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "prx0003-datospersona").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:16Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: prx0004-enviarnotificacion
    namespace: pipelines-prod
    resourceVersion: "9848529"
    uid: 59f45224-8799-441d-ac0c-7abc51075a8c
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/PRX0004-EnviarNotificacion',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "prx0004-enviarnotificaci").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=prx0004-enviarnotificaci", "--image-stream=fuse7-java-openshift:1.3", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/PRX0004-EnviarNotificacion-1.0.0.jar oc-build/deployments/PRX0004-EnviarNotificacion.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "prx0004-enviarnotificaci").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'prx0004-enviarnotificaci').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("prx0004-enviarnotificaci:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "prx0004-enviarnotificaci")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/prx0004-enviarnotificaci", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "prx0004-enviarnotificaci").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:16Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: prx0005-validartoken
    namespace: pipelines-prod
    resourceVersion: "9848533"
    uid: bca41f73-6c83-4fe9-8b84-d13ced9cd9e5
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab@dev.azure.com/dirtrab/Libro%20Remuneraciones%20Electronico/_git/PRX0005-validarToken',
                      branch: 'develop',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "prx0005-validartoken").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=prx0005-validartoken", "--image-stream=fuse7-java-openshift:1.3", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/PRX0005-validarToken-1.0.jar oc-build/deployments/PRX0005-validarToken.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "prx0005-validartoken").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'prx0005-validartoken').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("prx0005-validartoken:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "prx0005-validartoken")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/prx0005-validartoken", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "prx0005-validartoken").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:16Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: srv0001-declaracioneslibroremuneraciones
    namespace: pipelines-prod
    resourceVersion: "9848537"
    uid: 2cc2a9a4-7dff-4e44-a022-5a27f1f22f6a
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/SRV0001-DeclaracionLibroRemuneraciones',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "srv0001-declaracionlibro").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=srv0001-declaracionlibro", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/SRV0001-DeclaracionesLibroRemuneraciones-2.0.jar oc-build/deployments/SRV0001-DeclaracionesLibroRemuneraciones.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "srv0001-declaracionlibro").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 15"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'srv0001-declaracionlibro').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("srv0001-declaracionlibro:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "srv0001-declaracionlibro")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 15
                        }
                        openshift.set("triggers", "dc/srv0001-declaracionlibro", "--manual")
                      }
                      sh "sleep 50"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                  sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "srv0001-declaracionlibro").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:16Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: srv0002-obtenerdeclaracioneslre
    namespace: pipelines-prod
    resourceVersion: "9848541"
    uid: f8ecce0c-971d-4a36-bb35-7346cfd064ee
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab@dev.azure.com/dirtrab/Libro%20Remuneraciones%20Electronico/_git/SRV0002-ObtenerDeclaracionesLRE',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "srv0002-obtenerdeclaraci").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=srv0002-obtenerdeclaraci", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/SRV0002-ObtenerDeclaracionesLRE-1.0.jar oc-build/deployments/SRV0002-ObtenerDeclaracionesLRE.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "srv0002-obtenerdeclaraci").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'srv0002-obtenerdeclaraci').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("srv0002-obtenerdeclaraci:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "srv0002-obtenerdeclaraci")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/srv0002-obtenerdeclaraci", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                  sh "sleep 30"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "srv0002-obtenerdeclaraci").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:17Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: srv0003-empleadores
    namespace: pipelines-prod
    resourceVersion: "9848545"
    uid: 1e69ec2b-e31c-4d9b-8141-dd02e4ce5d72
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/SRV0003-Empleadores',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "srv0003-empleadores").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=srv0003-empleadores", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/SRV0003-Empleadores-1.0.jar oc-build/deployments/SRV0003-Empleadores.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "srv0003-empleadores").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'srv0003-empleadores').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("srv0003-empleadores:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "srv0003-empleadores")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/srv0003-empleadores", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                  sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "srv0003-empleadores").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:17Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: srv0004-declaraciontransferencia
    namespace: pipelines-prod
    resourceVersion: "9848570"
    uid: a11ffe09-7acf-440e-b87a-04b00800f9e7
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/SRV0004-DeclaracionTransferencia',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "srv0004-declaraciontrans").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=srv0004-declaraciontrans", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/SRV0004-DeclaracionTransferencia-2.0.jar oc-build/deployments/SRV0004-DeclaracionTransferencia.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "srv0004-declaraciontrans").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en ṕrod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'srv0004-declaraciontrans').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("srv0004-declaraciontrans:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "srv0004-declaraciontrans")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/srv0004-declaraciontrans", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                  sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "srv0004-declaraciontrans").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:17Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: srv0005-descargalre
    namespace: pipelines-prod
    resourceVersion: "9848588"
    uid: c84f5dcc-756d-46cf-adba-f402bb43ad4e
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/SRV0005-DescargaLRE',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "srv0005-descargalre").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=srv0005-descargalre", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/SRV0005-DescargaLRE-1.0.jar oc-build/deployments/SRV0005-DescargaLRE.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "srv0005-descargalre").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'srv0005-descargalre').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("srv0005-descargalre:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "srv0005-descargalre")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/srv0005-descargalre", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                  sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "srv0005-descargalre").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:17Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: srv0006-apimetadata
    namespace: pipelines-prod
    resourceVersion: "9848593"
    uid: 58cebbeb-08db-4f93-834a-f11127be2ba2
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Clonando repo y Compilando') {
                  steps {
                      git([url: 'https://dirtrab.visualstudio.com/Libro%20Remuneraciones%20Electronico/_git/SRV0006-ApiMetadata',
                      branch: 'master',
                      credentialsId: 'azure_credenciales_id'])
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "mvn -s configuration/settings.xml install -DskipTests=true"
                }
              }
              stage('Creando Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector("bc", "srv0006-apimetadata").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.newBuild("--name=srv0006-apimetadata", "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Construyendo imagen') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/SRV0006-ApiMetadata-1.0.jar oc-build/deployments/SRV0006-ApiMetadata.jar"

                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("bc", "srv0006-apimetadata").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                  sh "sleep 10"
                }
              }
              stage('Creando en prod') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        return !openshift.selector('dc', 'srv0006-apimetadata').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        def app = openshift.newApp("srv0006-apimetadata:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "srv0006-apimetadata")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/srv0006-apimetadata", "--manual")
                      }
                      sh "sleep 45"
                    }
                  }
                }
              }
              stage('Desplegando en prod') {
                steps {
                  sh "sleep 10"
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PROD_PROJECT) {
                        openshift.selector("dc", "srv0006-apimetadata").rollout().latest();
                      }
                      sh "sleep 15"
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:17Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: srv0007-bff
    namespace: pipelines-prod
    resourceVersion: "9848597"
    uid: 50995655-4d06-4530-a136-1015ccc76d84
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: "def templateName = 'srv0007-bff' \npipeline {\n  agent {\n    label
          'nodejs'\n  }\n  options {\n    timeout(time: 20, unit: 'MINUTES') \n  }\n
          \ stages {\n    stage('preparando pipeline') {\n        steps {\n            script
          {\n                openshift.withCluster() {\n                    openshift.withProject(env.PROD_PROJECT)
          {\n                        echo \"Using project: ${openshift.project()}\"\n
          \                   }\n                }\n            }\n        }\n    }\n
          \   stage('cleanup') {\n      steps {\n        script {\n            openshift.withCluster()
          {\n                openshift.withProject(env.PROD_PROJECT) {\n                  openshift.selector(\"all\",
          [ template : templateName ]).delete() \n                  if (openshift.selector(\"secrets\",
          templateName).exists()) { \n                    openshift.selector(\"secrets\",
          templateName).delete()\n                  }\n                }\n            }\n
          \       }\n      }\n    }\n    stage('build') {\n      steps {\n        script
          {\n            openshift.withCluster() {\n                openshift.withProject(env.PROD_PROJECT)
          {\n                  def builds = openshift.selector(\"bc\", templateName)\n
          \                 builds.startBuild()\n                  builds.logs(\"-f\")\n
          \                 echo \"build terminado\"\n                  echo \"comenzando
          deployment\"\n                }\n            }\n        }\n      }\n    }\n
          \   stage('deploy') {\n      steps {\n        script {\n            openshift.withCluster()
          {\n                openshift.withProject(env.PROD_PROJECT) {\n                  //latest
          no es necesario porque el build trigger el deploy\n                  //def
          rm = openshift.selector(\"dc\", templateName).rollout().latest()\n                  //
          this will wait until the desired replicas are available\n                  sh
          \"sleep 15\"\n                  def dc = openshift.selector(\"dc\", templateName)\n
          \                 dc.rollout().status()\n                }\n            }\n
          \       }\n      }\n    }\n  }\n}\n"
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/backup-registry-hostname: docker-registry.default.svc:5000
      openshift.io/backup-server-version: "1.11"
      openshift.io/migration-registry: ""
      openshift.io/restore-registry-hostname: image-registry.openshift-image-registry.svc:5000
      openshift.io/restore-server-version: "1.23"
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind":
        "DeploymentConfig"}]'
    creationTimestamp: "2023-05-23T15:48:18Z"
    generation: 1
    labels:
      app: cicd-pipeline
      group: cicd
      migration.openshift.io/migrated-by-migmigration: 7765386f-b389-4f43-9a59-edf571957ed6
      migration.openshift.io/migrated-by-migplan: cc640fb7-e663-45df-b691-0008663d0ae9
      name: cicd-pipeline
      template: cicd
      velero.io/backup-name: migration-15bf4-initial-6wqzl
      velero.io/restore-name: migration-15bf4-final-5jpwz
    name: srv0008-validaciones
    namespace: pipelines-prod
    resourceVersion: "9848605"
    uid: 91221cb5-c6cf-4d11-9350-0d8b17a45d70
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROD_PROJECT
          value: api-fiscalizacion-prod
        - name: ENABLE_QUAY
          value: "false"
        jenkinsfile: "def templateName = 'srv0008-validaciones' \npipeline {\n  agent
          {\n    label 'nodejs'\n  }\n  options {\n    timeout(time: 20, unit: 'MINUTES')
          \n  }\n  stages {\n    stage('preparando pipeline') {\n        steps {\n
          \           script {\n                openshift.withCluster() {\n                    openshift.withProject(env.PROD_PROJECT)
          {\n                        echo \"Using project: ${openshift.project()}\"\n
          \                   }\n                }\n            }\n        }\n    }\n
          \   stage('cleanup') {\n      steps {\n        script {\n            openshift.withCluster()
          {\n                openshift.withProject(env.PROD_PROJECT) {\n                  openshift.selector(\"all\",
          [ template : templateName ]).delete() \n                  if (openshift.selector(\"secrets\",
          templateName).exists()) { \n                    openshift.selector(\"secrets\",
          templateName).delete()\n                  }\n                }\n            }\n
          \       }\n      }\n    }\n    stage('build') {\n      steps {\n        script
          {\n            openshift.withCluster() {\n                openshift.withProject(env.PROD_PROJECT)
          {\n                  def builds = openshift.selector(\"bc\", templateName)\n
          \                 builds.startBuild()\n                  builds.logs(\"-f\")\n
          \                 echo \"build terminado\"\n                  echo \"comenzando
          deployment\"\n                }\n            }\n        }\n      }\n    }\n
          \   stage('deploy') {\n      steps {\n        script {\n            openshift.withCluster()
          {\n                openshift.withProject(env.PROD_PROJECT) {\n                  //latest
          no es necesario porque el build trigger el deploy\n                  //def
          rm = openshift.selector(\"dc\", templateName).rollout().latest()\n                  //
          this will wait until the desired replicas are available\n                  sh
          \"sleep 15\"\n                  def dc = openshift.selector(\"dc\", templateName)\n
          \                 dc.rollout().status()\n                }\n            }\n
          \       }\n      }\n    }\n  }\n}\n"
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: vJU0CXQe
      type: GitHub
    - generic:
        secret: vJU0CXQe
      type: Generic
  status:
    lastVersion: 0
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
